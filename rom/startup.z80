INIT:
SPLASH_INIT:
	ld	sp,$5B00
	ld	b, (24 * 32) / 8
	ld	de, $0000	; No bright, paper = black, ink = black
.cls_black:	push	de
	push	de
	push	de
	push	de
	djnz	.cls_black

	ld	h,3	; Loop over 3 screen-thirds
.loop_screen_thirds:
	ld	de,$0f0f
	exx
	ld	de,$ffff
	ld	l,4	; 4 pattern repeats in screen-third (loop counter)
.loop_lines_in_cell:
	ld	a,16	; 16 pairs of identical pixel bytes in screen third (loop counter)
.loop_cells_in_third:
	ld	b,32/4
.loop_words_in_line:
	push	de
	push	de
	djnz	.loop_words_in_line
.next_pixel_row:	exx
	dec	a
	jr	nz,.loop_cells_in_third
	srl	e
	ld	d,e
	exx
	srl	e
	ld	d,e
	exx
	dec	l
	jr	nz,.loop_lines_in_cell
	dec	h
	jr	nz,.loop_screen_thirds

GLOBALS_INIT:
	ld	hl, INITIAL_GLOBAL_VALUES
	ld	de, I_HANDLER
	ld	bc, INITIAL_GLOBAL_VALUES.length
	ldir

	ld	sp, $f000	; Placeholder stack top.
	ei

SPLASH_ANIM:

.cyan_cyan	=	%00101101
.cyan_blue	=	%00101001
.cyan_black	=	%00101000
.cyan_white	=	%00101111
.green_cyan	=	%00100101
.green_green	=	%00100100
.green_blue	=	%00100001
.yellow_yellow	=	%00110110
.yellow_green	=	%00110100
.red_red	=	%00010010
.red_yellow	=	%00010110
.white_white	=	%00111111
.white_red	=	%00111010

	ld	hl, .data
.next_phase	ld	a, (hl)
	or	a
	jr	z, .end
	ld	b, a	; b := width of trailing colour stripe
	inc	hl
	ld	a, (hl)	; a := starting x position
	inc	hl
	ld	c, (hl)	; c := loop counter: steps across the screen
	inc	hl
	ld	d, (hl)	; d := trailing colour
	inc	hl
	ld	e, (hl)	; e := leading colour
	inc	hl
.phase_loop:	halt
	call	STRIPE_n
	dec	c
	jr	nz, .phase_loop
	jr	.next_phase

.data:
	; WIPE CYAN
	db	2, 0	; width, startx
	db	22	; iterations
	db	.cyan_cyan, .cyan_black

	; WIPE GREEN
	db	2, 1	; width, startx
	db	21	; iterations
	db	.green_green, .green_cyan

	; WIPE YELLOW
	db	4, 0	; width, startx
	db	11	; iterations
	db	.yellow_yellow, .yellow_green

	; WIPE RED
	db	4, -1	; width, startx
	db	11	; iterations
	db	.red_red, .red_yellow

	; WIPE WHITE
	db	4, -2	; width, startx
	db	11	; iterations
	db	.white_white, .white_red

	; END
	DB	0
.end
	ld	b, 8	; We could save two bytes here by rearranging data a bit, and assigning B in the loop…
	ld	c, 0b00101000 ; Cyan paper
.border_loop	halt 
	out	($fe), a	; set border, in spectrum from black to white. Makes transition softer & less jarring.
	xor	c	; Add in paper colour.
	ld	($5aff), a	; bottom-right screen cell
	ld	($5adf), a	; (bottom-1)-right screen cell
	xor	c	; Remove paper colour again.
	inc	a
	djnz	.border_loop

COPYRIGHT:
	ld	de, COPYRIGHT_TEXT
	ld	b, COPYRIGHT_TEXT.length
	ld	a, %00111000	; Black ink on white paper
	ld	hl, $1602	; x := 2 (half-cells), y := 22
	call	render_text
	halt

.pause_forever:
	halt
	jr	.pause_forever

STRIPE_n:
	; Draw a steep diagonal section of rainbow down the screen, from given x position,
	; A: x-position (0–45); D: trailing attribute; E: leading attribute; B: number of trailing cells (1+)
	; B,C,D,E,H,L preserved; A incremented by B
	push	hl
	push	bc
	ld	c, e
	call	STRIPE
	ld	c, d

.trail_loop:	dec	a
	call	STRIPE
	djnz	.trail_loop
	pop	bc
	pop	hl
	add	b
	add	b
	ret

	; Draw a steep diagonal section of rainbow down the screen, from given x position,
	; A: x-position (0–45); C: attribute to paint
	; A,F,B,C,D,E preserved; H,L trashed
STRIPE:
	push	af
	push	bc
	push	de
	ld	de, 32
	ld	h, $58	; HL := attribute pointer
	ld	l, a
	sub	e
	jr	nc, .stripe_rightoff	; Stripe position is beyond edge of screen
	ld	a, l
	ld	b, 12
	cp	b	; half of screen height
	jr	nc, .loop	; pattern is uninterrupted, and does not cross off screen
.stripe_leftoff:
	inc	a
.counter_is_in_a
	ld	b, a
.loop:
	ld	(hl), c
	add	hl, de
	ld	(hl), c
	add	hl, de
	dec	l
	djnz	.loop
	pop	de
	pop	bc
	pop	af
	ret
.stripe_rightoff:
	inc	a	; a := distance past last column + 1
	add	a	; a := double that (so row to start painting on)
	ld	b, a	; b := same thing (but in B, to use as counter)
	ld	a, 32+12
	sub	l	; a := height (in double cells) of stripe to paint
	ld	l, 31	; l := 31 (last column)
.drop_down:
	add	hl, de
	djnz	.drop_down
	jr	.counter_is_in_a

COPYRIGHT_TEXT:
	db	$a9,' 1982 Sinclair Research Ltd.'
.length	= $ - COPYRIGHT_TEXT

INITIAL_GLOBAL_VALUES:		; (Basically just the interrupt handler for now.)
	jp	DEFAULT_INTERRUPT_HANDLER
.length
