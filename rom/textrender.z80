	; Render some text
	; de	= pointer to characters
	; b	= count of characters
	; hl	= row/column (h = row 0–23; l = column 0–63)
	; a	= attrs for the text (h = row 0–23; l = column 0–63)
	; RETURNS:
	; hl	= end row/column 
	; TRASHES: pretty much all other normal registers (except IY and IX)
render_text:
	inc	b
	dec	b
	ret	z		; Return if no characters to render.

	inc	b		; b := characters to print + 1
	push	af		; push attrs value
	push	hl
	exx			; de' := char pointer; b' := remaining character count + 1
	pop	hl		; hl := (row, column)
	push	hl		; Push (row, column) to return, modified, at the end.
	; get screen position pointer into DE from HL coordinates (and attr pointer in HL)
	call	ROWCOL_ADDR
	push	hl		; Push address of attr block, to colour in character cells at the end.
	bit	5, d
	jr	z, render_common_char
			; We’re starting rendering halfway through a cell, so clear the rhs of the cell:
	ld	a, (hl)	; a := starting attribute
	rra
	rra
	rra
	xor	(hl)	; Want to check if paper==ink; in which case, clear the *whole* cell
	and	7
	jr	z, clr_half_cell0
	ld	a, $f0
clr_half_cell0:
	ld	h, d
	ld	l, e
	res	5, h
	ld	c, a	; c := char-cell mask (to clear rhs of cell)
	ld	b, $08	; b := count of cell lines
clr_half_cell:
	ld	a, (hl)
	and	c
	ld	(hl), a
	inc	h
	djnz	clr_half_cell
	jr	render_common_char

render_next_char:
	ld	a, -8
	add	h
	ld	d, a
	ld	e, l		; de := screen pointer
render_next_char_same_line:
	; <check haven’t gone off end of 32-character line>

render_common_char:
	exx			; de := char pointer; b := remaining characters + 1; de' := screen pointer
	dec	b
	jr	z, colour_it_in
	ld	a, (de)		; a := next character to render
	inc	de

	exx			; de := screen pointer
	ld	hl, FONT_LOOKUP	; Character index table

	; Force character (in A) to be in range of glyphs:
	sub	(hl)		; First character represented
	jr	nc, rep1
	xor	a
rep1:	inc	hl
	cp	(hl)		; #number characters represented
	jr	c, rep2
	xor	a
rep2:	inc hl

	; Look up glyph data:
	ld	c, a
	ld	b, 0
	add	hl, bc
	add	hl, bc
	ld	a, (hl)		; LOW byte of character data pointer
	inc	hl
	ld	h, (hl)		; HIGH byte of character data pointer
	ld	l, a		; hl := character pointer

	; Decode character info:
	ld	b, (hl)		; <char-info> = binary <widthnybles:2><startrow:3><height:3>
	inc	hl		; Advance to pixel data
	ld	a, b
	ex	af, af'		; a' := <char-info>
	ld	a, 7
	and	b
	ld	c, a		; c := <height:3>
	ld	a, b
	rra
	rra
	rra
	and	7
	ld	b, a		; b := <startrow:3>
	ex	de, hl		; hl := screen pointer; de := glyph pixel data
	ex	af, af'		; a := <chr-info>; a' := (8 - startrow - height)
	bit	5, h
	jp	nz, render_o4

	; RENDER AT OFFSET ZERO
render_o0:
	rla
	jp	nc, render_w0w1_o0
render_w2w3_o0:
	rla
	jr	c, render_w3_o0


	; RENDER 8-BIT GLYPH AT OFFSET ZERO
render_w2_o0:
	xor	a
	cp	b
	jr	z, r_w2_top_end_o0
r_w2_top_o0:
	ld	(hl), a
	inc	h
	djnz	r_w2_top_o0
r_w2_top_end_o0:
	or	c
	jr	z, r_w2_bot_o0_init
	inc	a
	rra
	ld	b, a
	jr	nc, r_w2_mid_o0_row2
r_w2_mid_o0_row1:
	ld	a, (de)
	ld	(hl), a
	inc	de
	inc	h
r_w2_mid_o0_row2:
	ld	a, (de)
	ld	(hl), a
	inc	de
	inc	h
	djnz	r_w2_mid_o0_row1

r_w2_bot_o0_init:
	xor	a
	sub	h
	and	7
	jr	z, r_w2_bot_end_o0
	ld	b, a
	xor	a
r_w2_bot_o0:
	ld	(hl), a
	inc	h
	djnz	r_w2_bot_o0
r_w2_bot_end_o0:
	inc	l		; move to next column
	jp	render_next_char

colour_it_in:
	exx		; de := screen pointer
	ld	a, e
	pop	hl	; hl := pointer to attribute block (of FIRST char)
	sub	l
	ld	b, a

	or	a	; clear carry flag
	bit	5, d
	jr	z, .no_half_incr
.has_half_incr:	scf
	inc	b	; We gonna colour into the next cell
.no_half_incr:	rla		; Multiply width in cells by 2, adding a half-cell if necessary (if Carry flag was set)
	pop	de	; Pop initial (row, column)
	add	e	; Add half-cell offset to column originally passed in
	ld	e, a	; de := row/column (d = row 0–23; e = column 0–63) (at end of text)

	pop	af	; a  := attrs
colour_loop:
	ld	(hl), a
	inc	l
	djnz	colour_loop	; We could have used ldir for memory copy here. It takes more setup, but fewer clocks per cell.
			; For short runs, up to 10 characters, djnz is faster. For 32 characters, ldir is 10% faster.
			; For VERY short runs (1–2 characters), djnz is twice as fast.
	ex	de, hl	; hl := row/column (h = row 0–23; l = column 0–63) (at end of text)
	ret


	; RENDER 12-BIT GLYPH AT OFFSET ZERO
render_w3_o0:
	xor	a
	cp	b
	jr	z, r_w3_top_end_o0
r_w3_top_o0:
	ld	(hl), a
	inc	l
	ld	(hl), a
	dec	l
	inc	h
	djnz	r_w3_top_o0
r_w3_top_end_o0:
	inc	l
	or	c
	jr	z, r_w3_bot_o0_init
	inc	a
	rra
	ld	b, a
	jr	nc, r_w3_mid_o0_row2
	dec	l

r_w3_mid_o0_row1:	; ROW ONE
	ld	a, (de)		; First byte of glyph pixels
	inc	de
	ld	(hl), a		; Write first byte
	inc	l
	ld	a, (de)		; Second byte of glyph pixels
	inc	de
	ld	(hl), a		; Write second byte
	inc	h

r_w3_mid_o0_row2:	; ROW TWO
	ld	a, (de)		; First byte of glyph pixels
	inc	de
	ld	c, a
	ld	a, (de)		; Second byte of glyph pixels
	inc	de
	ld	(hl), a		; Write second (rightmost) byte
	dec	l
	ld	(hl), c		; Write first (leftmost) byte
	inc	h
	djnz	r_w3_mid_o0_row1

	inc	l		; move to next column
r_w3_bot_o0_init:
	xor	a
	sub	h
	and	7
	jr	z, r_w3_bot_end_o0
	ld	b, a
	xor	a
r_w3_bot_o0:
	ld	(hl), a
	dec	l
	ld	(hl), a
	inc	l
	inc	h
	djnz	r_w3_bot_o0
r_w3_bot_end_o0:
	set	5, h		; offset next char by 4 pixels
	jp	render_next_char

render_w0w1_o0:
	rla
	jp	nc, render_next_char_same_line


	; RENDER 4-BIT GLYPH AT OFFSET ZERO
render_w1_o0:
	xor	a
	cp	b
	jr	z, r_w1_top_end_o0
r_w1_top_o0:
	ld	(hl), a
	inc	h
	djnz	r_w1_top_o0
r_w1_top_end_o0:
	or	c
	ld	c, $f0
	jr	z, r_w1_bot_o0_init
	inc	a
	rra
	ld	b, a
	jr	nc, r_w1_mid_o0_row2
r_w1_mid_o0_row1:
	ld	a, (de)
	inc	de
	and	c
	ld	(hl), a
	inc	h
r_w1_mid_o0_row2:
	ld	a, (de)
	inc	de
	and	c
	ld	(hl), a
	inc	h
	djnz	r_w1_mid_o0_row1

r_w1_bot_o0_init:
	xor	a
	sub	h
	and	7
	jr	z, r_w1_bot_end_o0
	ld	b, a
	xor	a
r_w1_bot_o0:
	ld	(hl), a
	inc	h
	djnz	r_w1_bot_o0
r_w1_bot_end_o0:
	set	5, h		; offset next char by 4 pixels
	jp	render_next_char




	; RENDER AT OFFSET 4
render_o4:
	res	5, h
	rla
	jp	nc, render_w0w1_o4
render_w2w3_o4:
	rla
	jr	c, render_w3_o4


	; RENDER 8-BIT GLYPH AT OFFSET4
render_w2_o4:
	exx
	ld	h, (SHIFT_LEFT_4_LOOKUP >> 8)	; 4-shift lookup thing
	exx
	inc	l
	xor	a
	cp	b
	jr	z, r_w2_top_end_o4
	; Clear only 2nd column:
r_w2_top_o4:
	ld	(hl), a
	inc	h
	djnz	r_w2_top_o4
r_w2_top_end_o4:
	or	c
	jr	z, r_w2_bot_o4_init
	inc	a
	rra
	ld	b, a
	jr	nc, r_w2_mid_o4_row2
	; Render both columns:

	dec	l
r_w2_mid_o4_row1:	; ROW 1
	ld	a, (de)		; Next byte of glyph pixels
	inc	de
	exx			; Access HL' for look-up of shift.
	ld	l, a
	ld	a, (hl)		; shift left 4 & mask
	ex	af, af'
	inc	h
	ld	a, (hl)		; shift right 5 & mask
	dec	h
	exx
	or	(hl)
	ld	(hl), a		; merge first (shifted) byte onto screen
	inc	l
	ex	af, af'
	ld	(hl), a		; copy second (shifted) byte onto screen
	inc	h

r_w2_mid_o4_row2:	; ROW 2
	ld	a, (de)		; Next byte of glyph pixels
	inc	de
	exx			; Access HL' for look-up of shift.
	ld	l, a
	inc	h
	ld	a, (hl)		; shift right 4 & mask
	dec	h
	ex	af, af'
	ld	a, (hl)		; shift left 5 & mask
	exx
	ld	(hl), a		; copy second (shifted) byte onto screen
	dec	l
	ex	af, af'
	or	(hl)
	ld	(hl), a		; merge first (shifted) byte onto screen
	inc	h
	djnz	r_w2_mid_o4_row1

	inc	l		; move to second column
r_w2_bot_o4_init:
	xor	a
	sub	h
	and	7
	jr	z, r_w2_bot_end_o4
	ld	b, a
	xor	a
	; Clear only 2nd column:
r_w2_bot_o4:
	ld	(hl), a
	inc	h
	djnz	r_w2_bot_o4
r_w2_bot_end_o4:
	set	5, h		; offset next char by 4 pixels
	jp	render_next_char


	; RENDER 12-BIT GLYPH AT OFFSET4
render_w3_o4:
	inc	l
	xor	a
	cp	b
	jr	z, r_w3_top_end_o4
r_w3_top_o4:
	ld	(hl), a
	inc	h
	djnz	r_w3_top_o4
r_w3_top_end_o4:
	or	c
	jr	z, r_w3_bot_o4_init
	inc	a
	rra
	ld	b, a
	jr	nc, r_w3_mid_o4_row2
	dec	l

r_w3_mid_o4_row1:
	ld	a, (de)
	inc	de
	ld	c, a		; C := leftmost byte of glyph pixels
	ld	a, (de)		; A  := rightmost byte of glyph pixels
	inc	de
	add	a
	rl	c
	adc	a
	rl	c
	adc	a
	rl	c
	adc	a
	rl	c
	adc	a
	or	(hl)
	ld	(hl), a		; merge first (shifted) byte onto screen
	inc	l
	ld	(hl), c		; copy second (shifted) byte onto screen
	inc	h

r_w3_mid_o4_row2:
	ld	a, (de)
	inc	de
	ld	c, a		; C := leftmost byte of glyph pixels
	ld	a, (de)		; A  := rightmost byte of glyph pixels
	inc	de
	srl	c
	rra
	srl	c
	rra
	srl	c
	rra
	srl	c
	rra
	ld	(hl), a		; copy second (shifted) byte onto screen
	dec	l
	ld	a, c
	or	(hl)
	ld	(hl), a		; merge first (shifted) byte onto screen
	inc	h

	djnz	r_w3_mid_o4_row1

	inc	l
r_w3_bot_o4_init:
	xor	a
	sub	h
	and	7
	jr	z, r_w3_bot_end_o4
	ld	b, a
	xor	a
r_w3_bot_o4:
	ld	(hl), a
	inc	h
	djnz	r_w3_bot_o4
r_w3_bot_end_o4:
	inc	l		; move to next column
	jp	render_next_char

render_w0w1_o4:
	rla
	jp	nc, render_next_char_same_line


	; RENDER 4-BIT GLYPH AT OFFSET4
render_w1_o4:
	ld	a, h
	add	b
	ld	h, a

	xor	a
	or	c
	ld	c, $0f
	jr	z, r_w1_bot_o4_init
	inc	a
	rra
	ld	b, a
	jr	nc, r_w1_mid_o4_half
r_w1_mid_o4:
	ld	a, (de)
	inc	de
	and	c
	or	(hl)
	ld	(hl), a
	inc	h
r_w1_mid_o4_half:
	ld	a, (de)
	inc	de
	and	c
	or	(hl)
	ld	(hl), a
	inc	h
	djnz	r_w1_mid_o4

r_w1_bot_o4_init:
	ld	a, h
	add	7
	and	$f8
	ld	h, a
	inc	l		; move to next column
	jp	render_next_char


	; row/column (HL) to screen address (DE) and attr pointer (HL)
	; Trashes: A
ROWCOL_ADDR:
	ld	a, 63
	cp	l
	jr	c, rowcol_out_of_range
	ld	a, 23
	cp	h
	jr	c, rowcol_out_of_range
	srl	l
	adc	(%01011111 - 23)
	and	%11100000
	or	h
	and	%11111000
	ld	d, a
	
	ld	a, h
	rrca
	rrca
	rrca
	ld	h, a
	and	%11100000
	or	l
	ld	e, a	; de := pixel cell pointer
	
	ld	a, %00000011
	and	h
	or	$58	; %01011000 Start of screen attributes
	ld	h, a
	ld	l, e	; hl := attribute cell pointer

	ret

rowcol_out_of_range:
	xor	a
	ld	d, a
	ld	e, a
	ld	h, a
	ld	l, a
	ret


/*
Some of the most useful commands for golfing in Z80 assembly language are sbc and adc. They often allow you to interact with the flag C in ways that are absolutely amazing. Here are some cool examples:

How to create a decreasing counter in A that stops at 0? or a : jr nz,$+3 : dec a is ugly. sub 1 : adc 0 is faster, runs in constant time and can often be size-optimized, if you have handy 0s or 1s in one of your other registers. Have to stop at a non-zero value N? No problem: sub N : adc N-1. This also works for incrementing counter that is clamped at 255: add 1 : sbc 0. This also works for a incrementing counter clamped at an arbitrary value N: add 256-N : sbc 256-N-1.
How to load an arbitrary value N to A when flag C is up (or zero otherwise)? ld a,N : jr c,$+3 : xor a is not the way. sbc a : and N usually is (it is faster and shorter by 2 bytes).
How about loading into A value N if flag C is up or value M if flag C is down? Don't mess with conditional jumps! Use sbc a : and N-M : add M. (This last trick I believe is invented by GriV).
https://codegolf.stackexchange.com/a/230574
*/