
SPLASH:
	ld	sp,$5B00
	ld	b, (24 * 32) / 8
	ld	de, $0909	; No bright, paper = blue, ink = blue
.cls_blue:	push	de
	push	de
	push	de
	push	de
	djnz	.cls_blue

	ld	h,3	; Loop over 3 screen-thirds
.loop_screen_thirds:
	ld	de,$0f0f
	exx
	ld	de,$ffff
	ld	l,4	; 4 pattern repeats in screen-third (loop counter)
.loop_lines_in_cell:
	ld	a,16	; 16 pairs of identical pixel bytes in screen third (loop counter)
.loop_cells_in_third:
	ld	b,32/4
.loop_words_in_line:
	push	de
	push	de
	djnz	.loop_words_in_line
.next_pixel_row:	exx
	dec	a
	jr	nz,.loop_cells_in_third
	srl	e
	ld	d,e
	exx
	srl	e
	ld	d,e
	exx
	dec	l
	jr	nz,.loop_lines_in_cell
	dec	h
	jr	nz,.loop_screen_thirds

.start
	ld	sp, $f000	; Placeholder stack top.
	ei

.cyan_cyan	=	%00101101
.cyan_blue	=	%00101001
.cyan_white	=	%00101111
.green_cyan	=	%00100101
.green_green	=	%00100100
.green_blue	=	%00100001
.yellow_yellow	=	%00110110
.yellow_green	=	%00110100
.red_red	=	%00010010
.red_yellow	=	%00010110
.white_white	=	%00111111
.white_red	=	%00111010

	ld	a, %000	; black
	out	($fe), a	; set border

	; WIPE CYAN
	ld	de, (.cyan_cyan << 8) | .cyan_blue
	ld	b, 20
	xor	a
	ld	c, d
	call	STRIPE
.phase0:
	halt
	call	STRIPE3
	dec	a
	djnz	.phase0

	; TURN BLUE INTO CYAN
	ld	a, 42
	ld	c, .cyan_white
	call	STRIPE
	dec	a
	ld	c, .cyan_cyan
	call	STRIPE

	; WIPE GREEN
	ld	de, (.green_green << 8) | .green_cyan
	ld	b, 19
	ld	c, .green_green
	xor	a
	call	STRIPE
	inc	a
	call	STRIPE
	inc	a
.phase1:
	halt
	call	STRIPE3
	dec	a
	djnz	.phase1

	; WIPE YELLOW
	ld	de, (.yellow_yellow << 8) | .yellow_green
	ld	b, 19
	xor	a
	ld	c, d
	call	STRIPE
	inc	a
.phase2:
	halt
	call	STRIPE3
	dec	a
	djnz	.phase2

	; WIPE RED
	ld	de, (.red_red << 8) | .red_yellow
	ld	b, 19
	ld	a, 0
.phase3:
	halt
	call	STRIPE3
	dec	a
	djnz	.phase3

	xor	a
	ld	c, .white_white
	call	STRIPE

	; WIPE WHITE
	ld	de, (.white_white << 8) | .white_red
	ld	b, 18
	ld	a, 1
.phase4:
	halt
	call	STRIPE3
	dec	a
	djnz	.phase4

	ld	a, %111	; white
	out	($fe), a	; set border


COPYRIGHT:
	ld	de, COPYRIGHT_TEXT
	ld	b, COPYRIGHT_TEXT.length
	ld	a, %00111000	; Black ink on white paper
	ld	hl, $1603	; x := 2 (half-cells), y := 22
	call	render_text
	halt

.pause_forever:
	halt
	jr	.pause_forever


STRIPE3:
	; Draw a steep diagonal section of rainbow down the screen, from given x position,
	; A: x-position (0–45); D: trailing attribute; E: leading attribute
	; B,C,D,E preserved; A,F,H,L trashed; A incremented by 4
	push	de
	push	bc
	ld	c, d
	call	STRIPE
	inc	a
	call	STRIPE
	inc	a
	call	STRIPE
	inc	a
	ld	c, e
	call	STRIPE
	pop	bc
	pop	de
	ret

	; Draw a steep diagonal section of rainbow down the screen, from given x position,
	; A: x-position (0–45); C: attribute to paint
	; A,F,B,C,D,E preserved; H,L trashed
STRIPE:
	push	af
	push	bc
	push	de
	ld	de, 32
	ld	h, $58	; HL := attribute pointer
	ld	l, a
	sub	e
	jr	nc, .stripe_rightoff	; Stripe position is beyond edge of screen
	ld	a, l
	cp	12	; half of screen height
	jr	nc, .stripe_mid	; pattern is uninterrupted, and does not cross off screen
.stripe_leftoff:
	ld	l, a
	ld	b, a
	inc	b
	jr	.stripe_mid_loop
.stripe_mid:
	ld	l, a
	ld	a, b
	ld	b, 12
.stripe_mid_loop:
	ld	(hl), c
	add	hl, de
	ld	(hl), c
	add	hl, de
	dec	l
	djnz	.stripe_mid_loop
	pop	de
	pop	bc
	pop	af
	ret
.stripe_rightoff:
	inc	a	; a := distance past last column + 1
	add	a	; a := double that (so row to start painting on)
	ld	b, a	; b := same thing (but in B, to use as counter)
	ld	a, 32+12
	sub	l	; a := height (in double cells) of stripe to paint
	ld	l, e	; l := 32
	dec	l	; l := 31 (last column)
.drop_down:
	add	hl, de
	djnz	.drop_down
	ld	b, a
	jr	.stripe_mid_loop

COPYRIGHT_TEXT:
	db	$a9,' 1982 Sinclair Research Ltd.'
.length	= $ - COPYRIGHT_TEXT